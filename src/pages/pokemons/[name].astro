---
import type { GetStaticPaths } from 'astro';
import type { PokemonListResponse } from '@interfaces/pokemon-list.response';

import MainLayout from '@layouts/MainLayout.astro';
import PokemonCard from '@components/pokemons/PokemonCard.astro';
import Title from '@components/shared/Title.astro';
import { Icon } from 'astro-icon/components';

interface Props {
  name: string;
  url: string;
}

export const getStaticPaths = (async () => {
  const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
  const { results } = (await res.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name },
    props: { name, url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split('/').at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokémon -#${id} - ${name}`}
  description={`Información sobre el pokemon ${name}`}
  image={imageSrc}
>
  <section class='mt-10 mx-10 flex flex-col justify-center items-center'>
    <div class='flex flex-row'>
      <div>
        <button onclick='history.back()' class='text-blue-500'>Regresar</button>
        <Title>{name}</Title>
      </div>

      <button id='btn-favorite' class='ml-4' data-name={name} data-id={id}
        ><Icon data-outline name='heart-outline' size={50} color={'red'} />
        <Icon
          data-full
          class='hidden'
          name='heart-full'
          size={50}
          color={'red'}
        /></button
      >
    </div>

    <PokemonCard name={name} url={url} isBig={true} />

    <audio controls class='mt-5'>
      <source src={audioSrc} type='audio/ogg' />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>

<script>
  import type { FavoritePokemon } from '@interfaces/favorite-pokemon';

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem('favorites') ?? '[]',
    );

    const btnFavorite = document.querySelector(
      '#btn-favorite',
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? '';
    const id = btnFavorite.dataset.id ?? '';

    const heartOutline = btnFavorite.querySelector(
      '[data-outline]',
    ) as HTMLElement;

    const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement;

    const isFavorite = favoritePokemons.some((fav) => fav.name === name);

    //Function to show the heart icon if the pokemon is in the favorites list
    const showHeartIcon = () => {
      if (isFavorite) {
        heartOutline.classList.add('hidden');
        heartFull.classList.remove('hidden');
      }
    };

    showHeartIcon();

    const toggleFavorite = () => {
      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
      } else {
        favoritePokemons.push({ name, id: +id });
      }

      localStorage.setItem('favorites', JSON.stringify(favoritePokemons));
    };

    btnFavorite.addEventListener('click', () => {
      heartOutline.classList.toggle('hidden');
      heartFull.classList.toggle('hidden');
      toggleFavorite();
    });
  };

  document.addEventListener('astro:page-load', handlePageLoad);
</script>

<style>
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>
